{"version":3,"file":"generated.js","sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","node_modules/es6-object-assign/src/index.js","src/prototypo-canvas.js","src/utils/glyph.js","src/utils/init.js","src/utils/loadFont.js","src/utils/mouseHandlers.js","src/utils/workerHandlers.js","src/worker.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","PrototypoCanvas","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"assign","target","firstSource","undefined","TypeError","to","Object","arguments","nextSource","keysArray","keys","nextIndex","len","nextKey","desc","getOwnPropertyDescriptor","enumerable","polyfill","defineProperty","configurable","writable","value","prototypo","glyph","mouseHandlers","workerHandlers","init","loadFont","_","paper","opts","setup","canvas","setAttribute","fill","shoNodes","zoomFactor","jQueryListeners","view","center","project","activeLayer","applyMatrix","scale","worker","_queue","_fill","_showNodes","showNodes","fontsMap","isMousedown","addEventListener","currentJob","result","type","callback","dequeue","bind","$","jQuery","on","wheelHandler","moveHandler","downHandler","document","upHandler","raf","requestAnimationFrame","webkitRequestAnimationFrame","updateLoop","latestRafValues","currGlyph","font","update","prototype","defineProperties","zoom","get","set","bool","displayGlyph","showCoords","settings","drawCoords","subset","enqueue","data","displayChar","latestChar","charMap","charCodeAt","PaperScope","Path","_drawSelected","handleSize","handleColor","nodeColor","handleFont","priorities","message","indexOf","postMessage","emptyQueue","values","latestValues","download","cb","name","openInGlyphr","_glyph","glyphMap","visible","components","forEach","component","fillColor","strokeWidth","contours","contour","fullySelected","skeleton","_project","_needsUpdate","SelectionState","HANDLE_IN","HANDLE_OUT","POINT","SEGMENT","worldCoords","Float32Array","viewCoords","drawHandles","ctx","segments","matrix","size","half","pX","pY","drawHandle","j","hX","Math","round","hY","text","beginPath","strokeStyle","fillStyle","moveTo","lineTo","stroke","arc","PI","globalAlpha","fillText","measureText","width","segment","_transformCoordinates","state","_selectionState","fillRect","_segments","_scope","_view","_zoom","shell","URL","webkitURL","prototypoSource","Promise","resolve","fetch","prototypoUrl","then","workerUrl","encodeURIComponent","createObjectURL","Blob","toString","Worker","onmessage","translateGlyph","ot","unicode","fontSource","charAt","fontObj","JSON","parse","solvingOrdersListener","key","glyphs","solvingOrder","removeEventListener","parametricFont","event","bcr","getBoundingClientRect","currPos","Point","clientX","left","clientY","top","viewPos","viewToProject","factor","abs","deltaY","deltaMode","newZoom","beta","difference","subtract","newCenter","multiply","preventDefault","delta","prevPos","divide","button","zoomIn","zoomOut","fontBufferHandler","ArrayBuffer","latestBuffer","addToFonts","otfFontHandler","console","log","svgFontHandler","updateHandler","subsetHandler","importScripts","decodeURIComponent","location","search","replace","handlers","currValues","currSubset","translateSubset","map","filter","height","solvingOrders","params","_updateVersion","updateOTCommands","buffer","toBuffer","prevGlyphs","otfFont"],"mappings":"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":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Code refactored from Mozilla Developer Network:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n */\n\n'use strict';\n\nfunction assign(target, firstSource) {\n  if (target === undefined || target === null) {\n    throw new TypeError('Cannot convert first argument to object');\n  }\n\n  var to = Object(target);\n  for (var i = 1; i < arguments.length; i++) {\n    var nextSource = arguments[i];\n    if (nextSource === undefined || nextSource === null) {\n      continue;\n    }\n\n    var keysArray = Object.keys(Object(nextSource));\n    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {\n      var nextKey = keysArray[nextIndex];\n      var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n      if (desc !== undefined && desc.enumerable) {\n        to[nextKey] = nextSource[nextKey];\n      }\n    }\n  }\n  return to;\n}\n\nfunction polyfill() {\n  if (!Object.assign) {\n    Object.defineProperty(Object, 'assign', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: assign\n    });\n  }\n}\n\nmodule.exports = {\n  assign: assign,\n  polyfill: polyfill\n};\n","var prototypo = (typeof window !== \"undefined\" ? window.prototypo : typeof global !== \"undefined\" ? global.prototypo : null),\n\tassign = require('es6-object-assign').assign,\n\t// Grid = require('./grid'),\n\tglyph = require('./utils/glyph'),\n\tmouseHandlers = require('./utils/mouseHandlers'),\n\tworkerHandlers = require('./utils/workerHandlers'),\n\tinit = require('./utils/init'),\n\tloadFont = require('./utils/loadFont');\n\nvar _ = { assign: assign },\n\tpaper = prototypo.paper;\n\n// constructor\nfunction PrototypoCanvas( opts ) {\n\tpaper.setup( opts.canvas );\n\t// enable pointerevents on the canvas\n\topts.canvas.setAttribute('touch-action', 'none');\n\n\tthis.opts = _.assign({\n\t\tfill: true,\n\t\tshoNodes: false,\n\t\tzoomFactor: 0.05,\n\t\tjQueryListeners: true\n\t}, opts);\n\n\tthis.canvas = opts.canvas;\n\tthis.view = paper.view;\n\tthis.view.center = [ 0, 0 ];\n\tthis.project = paper.project;\n\tthis.project.activeLayer.applyMatrix = false;\n\tthis.project.activeLayer.scale( 1, -1 );\n\tthis.worker = opts.worker;\n\tthis._queue = [];\n\tthis._fill = this.opts.fill;\n\tthis._showNodes = this.opts.showNodes;\n\tthis.fontsMap = {};\n\tthis.isMousedown = false;\n\n\t// this.grid = new Grid( paper );\n\n\t// bind workerHandlers\n\tif ( this.worker ) {\n\t\tthis.worker.addEventListener('message', function(e) {\n\t\t\t// the job might have been cancelled\n\t\t\tif ( !this.currentJob ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// execute the appropriate handler, according to the type of the\n\t\t\t// current job.\n\t\t\tvar result = this[ this.currentJob.type + 'Handler' ](e);\n\n\t\t\tif ( this.currentJob.callback ) {\n\t\t\t\tthis.currentJob.callback( result );\n\t\t\t}\n\n\t\t\tthis.currentJob = false;\n\t\t\tthis.dequeue();\n\n\t\t}.bind(this));\n\t}\n\n\t// bind mouseHandlers (jQuery is an optional dependency)\n\tif ( ( 'jQuery' in window ) && this.opts.jQueryListeners ) {\n\t\tvar $ = window.jQuery,\n\t\t\ttype = ( 'PointerEventsPolyfill' in window ) ||\n\t\t\t\t( 'PointerEvent' in window ) ? 'pointer' : 'mouse';\n\n\t\t$(opts.canvas).on( 'wheel', this.wheelHandler.bind(this) );\n\n\t\t$(opts.canvas).on( type + 'move', this.moveHandler.bind(this) );\n\n\t\t$(opts.canvas).on( type + 'down', this.downHandler.bind(this) );\n\n\t\t$(document).on( type + 'up', this.upHandler.bind(this) );\n\t}\n\n\t// setup raf loop\n\tvar raf = window.requestAnimationFrame ||\n\t\t\twindow.webkitRequestAnimationFrame,\n\t\tupdateLoop = function() {\n\t\t\traf(updateLoop);\n\n\t\t\tif ( !this.latestRafValues || !this.currGlyph ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.font.update( this.latestRafValues, [ this.currGlyph ] );\n\t\t\tthis.view.update();\n\t\t\tdelete this.latestRafValues;\n\n\t\t}.bind(this);\n\tupdateLoop();\n}\n\nPrototypoCanvas.init = init;\nPrototypoCanvas.prototype.loadFont = loadFont;\n_.assign( PrototypoCanvas.prototype, mouseHandlers, workerHandlers );\n\nObject.defineProperties( PrototypoCanvas.prototype, {\n\tzoom: {\n\t\tget: function() {\n\t\t\treturn this.view.zoom;\n\t\t},\n\t\tset: function( zoom ) {\n\t\t\tthis.view.zoom = zoom;\n\t\t\t// this.grid.zoom = zoom;\n\t\t}\n\t},\n\tfill: {\n\t\tget: function() {\n\t\t\treturn this._fill;\n\t\t},\n\t\tset: function( bool ) {\n\t\t\tthis._fill = bool;\n\t\t\tthis.displayGlyph();\n\t\t}\n\t},\n\tshowNodes: {\n\t\tget: function() {\n\t\t\treturn this._showNodes;\n\t\t},\n\t\tset: function( bool ) {\n\t\t\tthis._showNodes = bool;\n\t\t\tthis.displayGlyph();\n\t\t}\n\t},\n\tshowCoords: {\n\t\tget: function() {\n\t\t\treturn paper.settings.drawCoords;\n\t\t},\n\t\tset: function( bool ) {\n\t\t\tpaper.settings.drawCoords = bool;\n\t\t\tthis.displayGlyph();\n\t\t}\n\t},\n\tsubset: {\n\t\tget: function() {\n\t\t\treturn this.font.subset;\n\t\t},\n\t\tset: function( set ) {\n\t\t\tthis.enqueue({\n\t\t\t\ttype: 'subset',\n\t\t\t\tdata: set\n\t\t\t});\n\n\t\t\tthis.font.subset = set;\n\t\t}\n\t}\n});\n\nPrototypoCanvas.prototype.displayGlyph = glyph.displayGlyph;\n\nPrototypoCanvas.prototype.displayChar = function( code ) {\n\tthis.latestChar = code;\n\tthis.displayGlyph( typeof code === 'string' ?\n\t\tthis.font.charMap[ code.charCodeAt(0) ] : code\n\t);\n};\n\n// overwrite the appearance of #selected items in paper.js\npaper.PaperScope.prototype.Path.prototype._drawSelected = glyph._drawSelected;\n_.assign( paper.settings, {\n\thandleSize: 6,\n\thandleColor: '#FF725E',\n\tnodeColor: '#00C4D6',\n\tdrawCoords: false,\n\thandleFont: '12px monospace'\n});\n\n// The worker queue is not your ordinary queue: the priority of the job is\n// defined arbitrarily, and any message previously present\n// at this position will be overwritten. The priorities associated to the\n// message type are hardcoded below (in ascending priority order).\nPrototypoCanvas.priorities = [ 'update', 'subset', 'svgFont', 'otfFont' ];\nPrototypoCanvas.prototype.enqueue = function( message ) {\n\tthis._queue[ PrototypoCanvas.priorities.indexOf( message.type ) ] = message;\n\tthis.dequeue();\n};\n\nPrototypoCanvas.prototype.dequeue = function() {\n\tif ( this.currentJob || !this.worker ) {\n\t\treturn;\n\t}\n\n\t// send the highest priority mesage in the queue (0 is lowest)\n\tfor ( var i = this._queue.length; i--; ) {\n\t\tif ( this._queue[i] ) {\n\t\t\tthis.currentJob = this._queue[i];\n\t\t\tthis.worker.postMessage( this.currentJob );\n\t\t\tthis._queue[i] = null;\n\t\t\tbreak;\n\t\t}\n\t}\n};\n\nPrototypoCanvas.prototype.emptyQueue = function() {\n\tthis._queue = [];\n\tthis.currentJob = false;\n};\n\nPrototypoCanvas.prototype.update = function( values ) {\n\t// latestValues are used in displayGlyph\n\t// latestWorkerValues is used and disposed by th/sue fontBufferHandler\n\t// latestRafValues is used and disposed by the raf loop\n\t// so we need all three!\n\tthis.latestValues = this.latestRafValues = values;\n\n\tthis.enqueue({\n\t\ttype: 'update',\n\t\tdata: values\n\t});\n};\n\nPrototypoCanvas.prototype.download = function( cb, name ) {\n\tif ( !this.worker || !this.latestValues ) {\n\t\t// the UI should wait for the first update to happen before allowing\n\t\t// the download button to be clicked\n\t\treturn false;\n\t}\n\n\tthis.enqueue({\n\t\ttype: 'otfFont',\n\t\tdata: name,\n\t\tcallback: cb\n\t});\n};\n\nPrototypoCanvas.prototype.openInGlyphr = function( cb ) {\n\tif ( !this.worker || !this.latestValues ) {\n\t\t// the UI should wait for the first update to happen before allowing\n\t\t// the download button to be clicked\n\t\treturn false;\n\t}\n\n\tthis.enqueue({\n\t\ttype: 'svgFont',\n\t\tcallback: cb\n\t});\n};\n\nmodule.exports = PrototypoCanvas;\n","function displayGlyph( _glyph ) {\n\tvar glyph =\n\t\t\t// no glyph means we're switching fill mode for the current glyph\n\t\t\t_glyph === undefined ? this.currGlyph :\n\t\t\t// accept glyph name and glyph object\n\t\t\ttypeof _glyph === 'string' ? this.font.glyphMap[_glyph] :\n\t\t\t_glyph;\n\n\tif ( glyph === undefined ) {\n\t\treturn;\n\t}\n\n\t// hide previous glyph\n\tif ( this.currGlyph && this.currGlyph !== glyph ) {\n\t\tthis.currGlyph.visible = false;\n\t\tthis.currGlyph.components.forEach(function(component) {\n\t\t\tcomponent.visible = false;\n\t\t}, this);\n\t}\n\n\tthis.currGlyph = glyph;\n\n\t// make sure the glyph is up-to-update\n\tif ( _glyph && this.latestValues ) {\n\t\tthis.currGlyph.update( this.latestValues );\n\t}\n\n\t// .. and show it\n\tthis.currGlyph.visible = true;\n\n\tif ( this._fill ) {\n\t\tthis.currGlyph.fillColor = '#333333';\n\t\tthis.currGlyph.strokeWidth = 0;\n\t} else {\n\t\tthis.currGlyph.fillColor = null;\n\t\tthis.currGlyph.strokeWidth = 1;\n\t}\n\n\tthis.currGlyph.contours.forEach(function(contour) {\n\t\tcontour.fullySelected = this._showNodes && !contour.skeleton;\n\t}, this);\n\n\tthis.currGlyph.components.forEach(function(component) {\n\t\tcomponent.visible = true;\n\t\tcomponent.contours.forEach(function(contour) {\n\t\t\tcontour.fullySelected = this._showNodes && !contour.skeleton;\n\t\t}, this);\n\t}, this);\n\n\tthis.view._project._needsUpdate = true;\n\tthis.view.update();\n}\n\n// Path#_selectedSegmentState is the addition of all segment's states, and is\n// compared with SelectionState.SEGMENT, the combination of all SelectionStates\n// to see if all segments are fully selected.\nvar SelectionState = {\n\t\tHANDLE_IN: 1,\n\t\tHANDLE_OUT: 2,\n\t\tPOINT: 4,\n\t\tSEGMENT: 7 // HANDLE_IN | HANDLE_OUT | POINT\n\t},\n\tworldCoords = new Float32Array(6),\n\tviewCoords = new Float32Array(6);\n\nfunction drawHandles(ctx, segments, matrix, settings, zoom) {\n\tvar size = settings.handleSize,\n\t\thalf = size / 2,\n\t\tpX,\n\t\tpY;\n\n\tfunction drawHandle(j) {\n\t\tvar hX = Math.round( viewCoords[j] ),\n\t\t\thY = Math.round( viewCoords[j + 1] ),\n\t\t\ttext;\n\n\t\tif ( viewCoords[0] !== viewCoords[j] ||\n\t\t\t\tviewCoords[1] !== viewCoords[j + 1]) {\n\n\t\t\tctx.beginPath();\n\t\t\tctx.strokeStyle = settings.handleColor;\n\t\t\tctx.fillStyle = settings.handleColor;\n\t\t\tctx.moveTo(pX, pY);\n\t\t\tctx.lineTo(hX, hY);\n\t\t\tctx.stroke();\n\t\t\tctx.beginPath();\n\t\t\tctx.arc(hX, hY, half, 0, Math.PI * 2, true);\n\t\t\tctx.fill();\n\n\t\t\tif ( settings.drawCoords ) {\n\t\t\t\ttext = Math.round( worldCoords[j] ) + ',' +\n\t\t\t\t\tMath.round( worldCoords[j + 1] );\n\n\t\t\t\t// use alpha to reduce the clutter caused by all this text when\n\t\t\t\t// zooming out\n\t\t\t\tif ( zoom < 1.7 ) {\n\t\t\t\t\tctx.globalAlpha = 0.2;\n\t\t\t\t} else if ( zoom < 3 ) {\n\t\t\t\t\tctx.globalAlpha = 0.4;\n\t\t\t\t}\n\t\t\t\tctx.fillText(\n\t\t\t\t\ttext,\n\t\t\t\t\thX - half - 3 - ctx.measureText(text).width,\n\t\t\t\t\t// The text is slightly above the marker. This avoids\n\t\t\t\t\t// overlapping when the handle vector is horizontal, which\n\t\t\t\t\t// is quite a frequent case.\n\t\t\t\t\thY - 2\n\t\t\t\t);\n\t\t\t\tif ( zoom < 3 ) {\n\t\t\t\t\tctx.globalAlpha = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (var i = 0, l = segments.length; i < l; i++) {\n\t\tvar segment = segments[i];\n\t\tsegment._transformCoordinates(null, worldCoords, false);\n\t\tsegment._transformCoordinates(matrix, viewCoords, false);\n\t\tvar state = segment._selectionState;\n\t\tpX = Math.round( viewCoords[0] );\n\t\tpY = Math.round( viewCoords[1] );\n\t\tif ( state & /*#=*/ SelectionState.HANDLE_IN ) {\n\t\t\tdrawHandle(2);\n\t\t}\n\t\tif ( state & /*#=*/ SelectionState.HANDLE_OUT ) {\n\t\t\tdrawHandle(4);\n\t\t}\n\t\t// Draw a rectangle at segment.point:\n\t\tctx.fillStyle = settings.nodeColor;\n\t\tctx.fillRect( pX - half, pY - half, size, size );\n\t\tctx.font = settings.handleFont;\n\n\t\tif ( settings.drawCoords ) {\n\t\t\tif ( zoom < 1.7 ) {\n\t\t\t\tctx.globalAlpha = 0.4;\n\t\t\t}\n\t\t\tctx.fillText(\n\t\t\t\tMath.round( worldCoords[0] ) + ',' +\n\t\t\t\tMath.round( worldCoords[1] ),\n\t\t\t\tpX + half + 5,\n\t\t\t\tpY - 2\n\t\t\t);\n\t\t\tif ( zoom < 1.7 ) {\n\t\t\t\tctx.globalAlpha = 1;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction _drawSelected( ctx, matrix ) {\n\tctx.beginPath();\n\t// Now stroke it and draw its handles:\n\tctx.stroke();\n\tdrawHandles(\n\t\tctx,\n\t\tthis._segments,\n\t\tmatrix,\n\t\tthis._project._scope.settings,\n\t\tthis._project._view._zoom\n\t);\n}\n\nmodule.exports = {\n\tdisplayGlyph: displayGlyph,\n\t_drawSelected: _drawSelected\n};\n","var shell = require('./../worker');\n\nvar URL = typeof window !== 'undefined' && ( window.URL || window.webkitURL );\n\nmodule.exports = function init( opts ) {\n\tvar PrototypoCanvas = this;\n\n\treturn ( opts.prototypoSource ?\n\t\tPromise.resolve( opts.prototypoSource ) :\n\t\t// fetch the resource from URL\n\t\tfetch( opts.prototypoUrl )\n\n\t).then(function( result ) {\n\t\treturn typeof result === 'string' || result.text();\n\n\t}).then(function( result ) {\n\t\tif ( result !== true ) {\n\t\t\topts.prototypoSource = result;\n\t\t}\n\n\t\t// the worker can be loaded from a file by specifying its url (dev\n\t\t// environment), or by building it as a blob, from a require'd file.\n\t\tif ( opts.workerUrl ) {\n\t\t\t// The search fragment of workerUrl must include prototypo.js URL\n\t\t\topts.workerUrl +=\n\t\t\t\t'?bundleurl=' + encodeURIComponent( opts.prototypoUrl );\n\n\t\t} else {\n\t\t\topts.workerUrl = URL.createObjectURL(\n\t\t\t\tnew Blob([\n\t\t\t\t\topts.prototypoSource + ';\\n\\n' +\n\t\t\t\t\t// IIFE power\n\t\t\t\t\t'(' + shell.toString() + ')();' +\n\t\t\t\t\t// For some reason [object Object] is appended to the source\n\t\t\t\t\t// by Firefox when the worker is created, which causes the\n\t\t\t\t\t// script to throw without the following comment.\n\t\t\t\t\t'//',\n\t\t\t\t\t{ type: 'text/javascript' }\n\t\t\t\t])\n\t\t\t);\n\t\t}\n\n\t}).then(function() {\n\t\t// create the worker\n\t\treturn new Promise(function( resolve ) {\n\t\t\tvar worker = opts.worker = new Worker( opts.workerUrl );\n\n\t\t\tworker.onmessage = function(e) {\n\t\t\t\tif ( e.data.type === 'ready' ) {\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\n\t}).then(function() {\n\t\treturn new PrototypoCanvas( opts );\n\t});\n};\n","// switch the current glyph with one that has the same name\n// in the next font, or one with the same unicode, or .undef\nfunction translateGlyph( self ) {\n\tif ( !self.currGlyph ) {\n\t\treturn;\n\t}\n\n\tself.displayGlyph(\n\t\tself.font.glyphMap[ self.currGlyph.name ] ||\n\t\tself.font.charMap[ self.currGlyph.ot.unicode ] ||\n\t\tself.font.glyphMap[ '.undef' ]\n\t);\n}\n\nmodule.exports = function loadFont( name, fontSource ) {\n\t// ignore the job currently running, empty the queue and clear update values\n\tthis.emptyQueue();\n\tthis.latestValues = this.latestRafValues = null;\n\n\t// TODO: memoizing should have a limited size!\n\tif ( name in this.fontsMap ) {\n\t\tthis.font = this.fontsMap[name];\n\t\ttranslateGlyph( this );\n\t\tthis.worker.postMessage({\n\t\t\ttype: 'font',\n\t\t\tname: name\n\t\t});\n\t\treturn Promise.resolve( this.font );\n\t}\n\n\treturn ( fontSource.charAt(0) === '{' ?\n\t\tPromise.resolve( fontSource ) :\n\t\t// fetch the resource from URL\n\t\tfetch( fontSource )\n\n\t).then(function( result ) {\n\t\treturn typeof result === 'string' || result.text();\n\n\t}).then(function( result ) {\n\t\tif ( result !== true ) {\n\t\t\tfontSource = result;\n\t\t}\n\n\t\treturn new Promise(function( resolve ) {\n\t\t\tvar fontObj = JSON.parse( fontSource ),\n\t\t\t\tsolvingOrdersListener = function( e ) {\n\t\t\t\t\t// reuse the solvingOrders computed in the worker (this is a\n\t\t\t\t\t// fairly heavy operation, better doing it only once,\n\t\t\t\t\t// asynchronously)\n\t\t\t\t\tif ( e.data.type !== 'solvingOrders' ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// merge solvingOrders with the source\n\t\t\t\t\tObject.keys( e.data.data ).forEach(function(key) {\n\t\t\t\t\t\tif ( e.data.data[key] ) {\n\t\t\t\t\t\t\tfontObj.glyphs[key].solvingOrder = e.data.data[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\t// this listener should be used only once\n\t\t\t\t\tthis.worker.removeEventListener(\n\t\t\t\t\t\t'message', solvingOrdersListener);\n\n\t\t\t\t\tthis.font = prototypo.parametricFont( fontObj );\n\t\t\t\t\tthis.fontsMap[name] = this.font;\n\t\t\t\t\ttranslateGlyph( this );\n\n\t\t\t\t\tresolve( this );\n\t\t\t\t}.bind(this);\n\n\t\t\tthis.worker.addEventListener('message', solvingOrdersListener);\n\n\t\t\tthis.worker.postMessage({\n\t\t\t\ttype: 'font',\n\t\t\t\tname: name,\n\t\t\t\tdata: fontSource\n\t\t\t});\n\n\t\t}.bind(this));\n\n\t}.bind(this));\n};\n","var paper = (typeof window !== \"undefined\" ? window.prototypo : typeof global !== \"undefined\" ? global.prototypo : null).paper;\n\nfunction wheelHandler( event ) {\n\tvar bcr = this.canvas.getBoundingClientRect(),\n\t\tcurrPos = new paper.Point(\n\t\t\tevent.clientX - bcr.left,\n\t\t\tevent.clientY - bcr.top\n\t\t),\n\t\tviewPos = this.view.viewToProject( currPos ),\n\t\t// normalize the deltaY value. Expected values are ~40 pixels or 3 lines\n\t\tfactor = 1 + ( this.opts.zoomFactor *\n\t\t\t( Math.abs( event.deltaY / event.deltaMode ? 3 : 40 * 20 ) ) ),\n\t\tnewZoom =\n\t\t\tevent.deltaY < 0 ?\n\t\t\t\tthis.view.zoom * factor :\n\t\t\t\tevent.deltaY > 0 ?\n\t\t\t\t\tthis.view.zoom / factor :\n\t\t\t\t\tthis.view.zoom,\n\t\tbeta = this.view.zoom / newZoom,\n\t\tdifference = viewPos.subtract( this.view.center ),\n\t\tnewCenter = viewPos.subtract( difference.multiply(beta) );\n\n\tthis.zoom = newZoom;\n\tthis.view.center = newCenter;\n\n\tevent.preventDefault();\n}\n\nfunction moveHandler(event) {\n\tif ( !this.isMousedown ) {\n\t\treturn;\n\t}\n\n\tvar currPos = new paper.Point( event.clientX, event.clientY ),\n\t\tdelta = currPos.subtract( this.prevPos );\n\n\tthis.prevPos = currPos;\n\n\tthis.view.center = this.view.center.subtract(\n\t\t\tdelta.divide( this.view.zoom ) );\n}\n\nfunction downHandler(event) {\n\tif (event.button && event.button !== 0) {\n\t\treturn;\n\t}\n\n\tthis.isMousedown = true;\n\tthis.prevPos = new paper.Point( event.clientX, event.clientY );\n}\n\nfunction upHandler() {\n\tthis.isMousedown = false;\n}\n\nfunction zoomIn() {\n\tthis.zoom = this.view.zoom * 1 + this.opts.zoomFactor;\n}\n\nfunction zoomOut() {\n\tthis.zoom = this.view.zoom / 1 + this.opts.zoomFactor;\n}\n\nmodule.exports = {\n\twheelHandler: wheelHandler,\n\tmoveHandler: moveHandler,\n\tdownHandler: downHandler,\n\tupHandler: upHandler,\n\tzoomIn: zoomIn,\n\tzoomOut: zoomOut\n};\n","// var dotsvgTemplate = require('./dotsvg.tpl');\n\n// handles buffers coming from the worker\nfunction fontBufferHandler(e) {\n\tif ( !(e.data instanceof ArrayBuffer) ) {\n\t\treturn;\n\t}\n\n\tthis.latestBuffer = e.data;\n\tthis.font.addToFonts( this.latestBuffer );\n}\n\nfunction otfFontHandler(e) {console.log('here');\n\tthis.latestBuffer = e.data;\n\tthis.font.download( this.latestBuffer );\n}\n\nfunction svgFontHandler() {\n\n}\n\nmodule.exports = {\n\tupdateHandler: fontBufferHandler,\n\tsubsetHandler: fontBufferHandler,\n\totfFontHandler: otfFontHandler,\n\tsvgFontHandler: svgFontHandler\n};\n","if ( typeof global === 'undefined' && 'importScripts' in self ) {\n\t// When the worker is loaded by URL, the search fragment must include\n\t// the URL of prototypo.js\n\tself.importScripts( decodeURIComponent(\n\t\tself.location.search.replace(/(\\?|&)bundleurl=(.*?)(&|$)/, '$2')\n\t) );\n}\n\nfunction worker() {\n\tvar font,\n\t\thandlers = {},\n\t\tfontsMap = {},\n\t\tcurrValues,\n\t\tcurrSubset = [],\n\t\ttranslateSubset = function() {\n\t\t\tif ( !currSubset.length ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfont.subset = currSubset.map(function( glyph ) {\n\t\t\t\treturn font.charMap[ glyph.ot.unicode ];\n\t\t\t}).filter(function( glyph ) { return glyph; });\n\n\t\t\tcurrSubset = font.subset;\n\t\t};\n\n\tself.postMessage({ type: 'ready' });\n\n\tprototypo.paper.setup({\n\t\twidth: 1024,\n\t\theight: 1024\n\t});\n\n\t// mini router\n\tself.onmessage = function(e) {\n\t\thandlers[ e.data.type ]( e.data.data, e.data.name );\n\t};\n\n\thandlers.font = function( fontSource, name ) {\n\t\t// TODO: this should be done using a memoizing table of limited size\n\t\tif ( name in fontsMap ) {\n\t\t\tfont = fontsMap[name];\n\t\t\ttranslateSubset();\n\t\t\treturn;\n\t\t}\n\n\t\tvar fontObj = JSON.parse( fontSource );\n\n\t\tfont = prototypo.parametricFont(fontObj);\n\t\tfontsMap[name] = font;\n\n\t\ttranslateSubset();\n\n\t\tvar solvingOrders = {};\n\t\tObject.keys( font.glyphMap ).forEach(function(key) {\n\t\t\tsolvingOrders[key] = font.glyphMap[key].solvingOrder;\n\t\t});\n\n\t\tself.postMessage({\n\t\t\ttype: 'solvingOrders',\n\t\t\tdata: solvingOrders\n\t\t});\n\t};\n\n\thandlers.update = function( params ) {\n\t\tcurrValues = params;\n\t\t// Why did I do that?\n\t\t// // invalidate the previous subset\n\t\t// currSubset = [];\n\n\t\tfont.update( currValues );\n\t\t// the following is required so that the globalMatrix of glyphs takes\n\t\t// the font matrix into account. I assume this is done in the main\n\t\t// thread when calling view.update();\n\t\tfont._project._updateVersion++;\n\t\tfont.updateOTCommands();\n\t\tvar buffer = font.ot.toBuffer();\n\t\tself.postMessage( buffer, [ buffer ] );\n\t};\n\n\thandlers.subset = function( set ) {\n\t\tvar prevGlyphs = currSubset.map(function( glyph ) {\n\t\t\treturn glyph.name;\n\t\t});\n\t\tfont.subset = set;\n\t\tcurrSubset = font.subset;\n\n\t\t// search for glyphs *added* to the subset\n\t\tcurrSubset.filter(function( glyph ) {\n\t\t\treturn prevGlyphs.indexOf( glyph.name ) === -1;\n\n\t\t// update those glyphs\n\t\t}).forEach(function( glyph ) {\n\t\t\tglyph.update( currValues );\n\t\t\tglyph.updateOTCommands();\n\t\t});\n\n\t\t// Recreate the correct font.ot.glyphs array, without touching the ot\n\t\t// commands\n\t\tfont.updateOTCommands([]);\n\t\tvar buffer = font.ot.toBuffer();\n\t\tself.postMessage( buffer, [ buffer ] );\n\t};\n\n\thandlers.otfFont = function() {\n\t\t// force the update of the whole font, ignoring the current subset\n\t\tfont.update( currValues, false );\n\n\t\tfont.updateOTCommands( false );\n\t\tvar buffer = font.ot.toBuffer();\n\t\tself.postMessage( buffer, [ buffer ] );\n\t};\n}\n\n// When the worker is loaded from URL, worker() needs to be called explicitely\nif ( typeof global === 'undefined' && 'importScripts' in self ) {\n\tworker();\n} else {\n\tmodule.exports = worker;\n}\n"]}